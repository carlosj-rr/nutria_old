# RUNNING THE SIMULATIONS
# The ones based on the founder (just a random founder, only sequence evolution)

t1_0,f1_0,a1_0 = nutria.runThisStuff(10000,founderpop)
t2_0,f2_0,a2_0 = nutria.runThisStuff(10000,founderpop)
t3_0,f3_0,a3_0 = nutria.runThisStuff(10000,a1_0)
t4_0,f4_0,a4_0 = nutria.runThisStuff(10000,a1_0)
t5_0,f5_0,a5_0 = nutria.runThisStuff(10000,a2_0)
t6_0,f6_0,a6_0 = nutria.runThisStuff(10000,a2_0)

t1_1,f1_1,a1_1 = nutria.runThisStuff(10000,founderpop)
t2_1,f2_1,a2_1 = nutria.runThisStuff(10000,founderpop)
t3_1,f3_1,a3_1 = nutria.runThisStuff(10000,a1_1)
t4_1,f4_1,a4_1 = nutria.runThisStuff(10000,a1_1)
t5_1,f5_1,a5_1 = nutria.runThisStuff(10000,a2_1)
t6_1,f6_1,a6_1 = nutria.runThisStuff(10000,a2_1)

t1_2,f1_2,a1_2 = nutria.runThisStuff(10000,founderpop)
t2_2,f2_2,a2_2 = nutria.runThisStuff(10000,founderpop)
t3_2,f3_2,a3_2 = nutria.runThisStuff(10000,a1_2)
t4_2,f4_2,a4_2 = nutria.runThisStuff(10000,a1_2)
t5_2,f5_2,a5_2 = nutria.runThisStuff(10000,a2_2)
t6_2,f6_2,a6_2 = nutria.runThisStuff(10000,a2_2)

t1_3,f1_3,a1_3 = nutria.runThisStuff(10000,founderpop)
t2_3,f2_3,a2_3 = nutria.runThisStuff(10000,founderpop)
t3_3,f3_3,a3_3 = nutria.runThisStuff(10000,a1_3)
t4_3,f4_3,a4_3 = nutria.runThisStuff(10000,a1_3)
t5_3,f5_3,a5_3 = nutria.runThisStuff(10000,a2_3)
t6_3,f6_3,a6_3 = nutria.runThisStuff(10000,a2_3)

t1_4,f1_4,a1_4 = nutria.runThisStuff(10000,founderpop)
t2_4,f2_4,a2_4 = nutria.runThisStuff(10000,founderpop)
t3_4,f3_4,a3_4 = nutria.runThisStuff(10000,a1_4)
t4_4,f4_4,a4_4 = nutria.runThisStuff(10000,a1_4)
t5_4,f5_4,a5_4 = nutria.runThisStuff(10000,a2_4)
t6_4,f6_4,a6_4 = nutria.runThisStuff(10000,a2_4)

t1_5,f1_5,a1_5 = nutria.runThisStuff(10000,founderpop)
t2_5,f2_5,a2_5 = nutria.runThisStuff(10000,founderpop)
t3_5,f3_5,a3_5 = nutria.runThisStuff(10000,a1_5)
t4_5,f4_5,a4_5 = nutria.runThisStuff(10000,a1_5)
t5_5,f5_5,a5_5 = nutria.runThisStuff(10000,a2_5)
t6_5,f6_5,a6_5 = nutria.runThisStuff(10000,a2_5)

t1_6,f1_6,a1_6 = nutria.runThisStuff(10000,founderpop)
t2_6,f2_6,a2_6 = nutria.runThisStuff(10000,founderpop)
t3_6,f3_6,a3_6 = nutria.runThisStuff(10000,a1_6)
t4_6,f4_6,a4_6 = nutria.runThisStuff(10000,a1_6)
t5_6,f5_6,a5_6 = nutria.runThisStuff(10000,a2_6)
t6_6,f6_6,a6_6 = nutria.runThisStuff(10000,a2_6)

t1_7,f1_7,a1_7 = nutria.runThisStuff(10000,founderpop)
t2_7,f2_7,a2_7 = nutria.runThisStuff(10000,founderpop)
t3_7,f3_7,a3_7 = nutria.runThisStuff(10000,a1_7)
t4_7,f4_7,a4_7 = nutria.runThisStuff(10000,a1_7)
t5_7,f5_7,a5_7 = nutria.runThisStuff(10000,a2_7)
t6_7,f6_7,a6_7 = nutria.runThisStuff(10000,a2_7)

t1_8,f1_8,a1_8 = nutria.runThisStuff(10000,founderpop)
t2_8,f2_8,a2_8 = nutria.runThisStuff(10000,founderpop)
t3_8,f3_8,a3_8 = nutria.runThisStuff(10000,a1_8)
t4_8,f4_8,a4_8 = nutria.runThisStuff(10000,a1_8)
t5_8,f5_8,a5_8 = nutria.runThisStuff(10000,a2_8)
t6_8,f6_8,a6_8 = nutria.runThisStuff(10000,a2_8)

t1_9,f1_9,a1_9 = nutria.runThisStuff(10000,founderpop)
t2_9,f2_9,a2_9 = nutria.runThisStuff(10000,founderpop)
t3_9,f3_9,a3_9 = nutria.runThisStuff(10000,a1_9)
t4_9,f4_9,a4_9 = nutria.runThisStuff(10000,a1_9)
t5_9,f5_9,a5_9 = nutria.runThisStuff(10000,a2_9)
t6_9,f6_9,a6_9 = nutria.runThisStuff(10000,a2_9)

# The ones based on the "oner", an organism that has no GRN structure
# (only 1's in the GRN and decays, and only 0's in the thresholds). Also only sequence evolution

to1_0,fo1_0,ao1_0 = nutria.runThisStuff(10000,onerpop)
to2_0,fo2_0,ao2_0 = nutria.runThisStuff(10000,onerpop)
to3_0,fo3_0,ao3_0 = nutria.runThisStuff(10000,ao1_0)
to4_0,fo4_0,ao4_0 = nutria.runThisStuff(10000,ao1_0)
to5_0,fo5_0,ao5_0 = nutria.runThisStuff(10000,ao2_0)
to6_0,fo6_0,ao6_0 = nutria.runThisStuff(10000,ao2_0)

to1_1,fo1_1,ao1_1 = nutria.runThisStuff(10000,onerpop)
to2_1,fo2_1,ao2_1 = nutria.runThisStuff(10000,onerpop)
to3_1,fo3_1,ao3_1 = nutria.runThisStuff(10000,ao1_1)
to4_1,fo4_1,ao4_1 = nutria.runThisStuff(10000,ao1_1)
to5_1,fo5_1,ao5_1 = nutria.runThisStuff(10000,ao2_1)
to6_1,fo6_1,ao6_1 = nutria.runThisStuff(10000,ao2_1)

to1_2,fo1_2,ao1_2 = nutria.runThisStuff(10000,onerpop)
to2_2,fo2_2,ao2_2 = nutria.runThisStuff(10000,onerpop)
to3_2,fo3_2,ao3_2 = nutria.runThisStuff(10000,ao1_2)
to4_2,fo4_2,ao4_2 = nutria.runThisStuff(10000,ao1_2)
to5_2,fo5_2,ao5_2 = nutria.runThisStuff(10000,ao2_2)
to6_2,fo6_2,ao6_2 = nutria.runThisStuff(10000,ao2_2)

to1_3,fo1_3,ao1_3 = nutria.runThisStuff(10000,onerpop)
to2_3,fo2_3,ao2_3 = nutria.runThisStuff(10000,onerpop)
to3_3,fo3_3,ao3_3 = nutria.runThisStuff(10000,ao1_3)
to4_3,fo4_3,ao4_3 = nutria.runThisStuff(10000,ao1_3)
to5_3,fo5_3,ao5_3 = nutria.runThisStuff(10000,ao2_3)
to6_3,fo6_3,ao6_3 = nutria.runThisStuff(10000,ao2_3)

to1_4,fo1_4,ao1_4 = nutria.runThisStuff(10000,onerpop)
to2_4,fo2_4,ao2_4 = nutria.runThisStuff(10000,onerpop)
to3_4,fo3_4,ao3_4 = nutria.runThisStuff(10000,ao1_4)
to4_4,fo4_4,ao4_4 = nutria.runThisStuff(10000,ao1_4)
to5_4,fo5_4,ao5_4 = nutria.runThisStuff(10000,ao2_4)
to6_4,fo6_4,ao6_4 = nutria.runThisStuff(10000,ao2_4)

to1_5,fo1_5,ao1_5 = nutria.runThisStuff(10000,onerpop)
to2_5,fo2_5,ao2_5 = nutria.runThisStuff(10000,onerpop)
to3_5,fo3_5,ao3_5 = nutria.runThisStuff(10000,ao1_5)
to4_5,fo4_5,ao4_5 = nutria.runThisStuff(10000,ao1_5)
to5_5,fo5_5,ao5_5 = nutria.runThisStuff(10000,ao2_5)
to6_5,fo6_5,ao6_5 = nutria.runThisStuff(10000,ao2_5)

to1_6,fo1_6,ao1_6 = nutria.runThisStuff(10000,onerpop)
to2_6,fo2_6,ao2_6 = nutria.runThisStuff(10000,onerpop)
to3_6,fo3_6,ao3_6 = nutria.runThisStuff(10000,ao1_6)
to4_6,fo4_6,ao4_6 = nutria.runThisStuff(10000,ao1_6)
to5_6,fo5_6,ao5_6 = nutria.runThisStuff(10000,ao2_6)
to6_6,fo6_6,ao6_6 = nutria.runThisStuff(10000,ao2_6)

to1_7,fo1_7,ao1_7 = nutria.runThisStuff(10000,onerpop)
to2_7,fo2_7,ao2_7 = nutria.runThisStuff(10000,onerpop)
to3_7,fo3_7,ao3_7 = nutria.runThisStuff(10000,ao1_7)
to4_7,fo4_7,ao4_7 = nutria.runThisStuff(10000,ao1_7)
to5_7,fo5_7,ao5_7 = nutria.runThisStuff(10000,ao2_7)
to6_7,fo6_7,ao6_7 = nutria.runThisStuff(10000,ao2_7)

to1_8,fo1_8,ao1_8 = nutria.runThisStuff(10000,onerpop)
to2_8,fo2_8,ao2_8 = nutria.runThisStuff(10000,onerpop)
to3_8,fo3_8,ao3_8 = nutria.runThisStuff(10000,ao1_8)
to4_8,fo4_8,ao4_8 = nutria.runThisStuff(10000,ao1_8)
to5_8,fo5_8,ao5_8 = nutria.runThisStuff(10000,ao2_8)
to6_8,fo6_8,ao6_8 = nutria.runThisStuff(10000,ao2_8)

to1_9,fo1_9,ao1_9 = nutria.runThisStuff(10000,onerpop)
to2_9,fo2_9,ao2_9 = nutria.runThisStuff(10000,onerpop)
to3_9,fo3_9,ao3_9 = nutria.runThisStuff(10000,ao1_9)
to4_9,fo4_9,ao4_9 = nutria.runThisStuff(10000,ao1_9)
to5_9,fo5_9,ao5_9 = nutria.runThisStuff(10000,ao2_9)
to6_9,fo6_9,ao6_9 = nutria.runThisStuff(10000,ao2_9)

# Exporting some data from founders
np.savetxt("founder_grn.csv",founder.grn,delimiter=",")
np.savetxt("oner_grn.csv",oner.grn,delimiter=",")
np.savetxt("founder_thresholds.csv",founder.thresholds,delimiter=",")
np.savetxt("founder_decays.csv",founder.decays,delimiter=",")

# Making np.arrays of organisms, to export sequence alignments
found_rep0 = np.array((a3_0.individuals[0],a4_0.individuals[0],a5_0.individuals[0],a6_0.individuals[0]))
found_rep1 = np.array((a3_1.individuals[0],a4_1.individuals[0],a5_1.individuals[0],a6_1.individuals[0]))
found_rep2 = np.array((a3_2.individuals[0],a4_2.individuals[0],a5_2.individuals[0],a6_2.individuals[0]))
found_rep3 = np.array((a3_3.individuals[0],a4_3.individuals[0],a5_3.individuals[0],a6_3.individuals[0]))
found_rep4 = np.array((a3_4.individuals[0],a4_4.individuals[0],a5_4.individuals[0],a6_4.individuals[0]))
found_rep5 = np.array((a3_5.individuals[0],a4_5.individuals[0],a5_5.individuals[0],a6_5.individuals[0]))
found_rep6 = np.array((a3_6.individuals[0],a4_6.individuals[0],a5_6.individuals[0],a6_6.individuals[0]))
found_rep7 = np.array((a3_7.individuals[0],a4_7.individuals[0],a5_7.individuals[0],a6_7.individuals[0]))
found_rep8 = np.array((a3_8.individuals[0],a4_8.individuals[0],a5_8.individuals[0],a6_8.individuals[0]))
found_rep9 = np.array((a3_9.individuals[0],a4_9.individuals[0],a5_9.individuals[0],a6_9.individuals[0]))

oner_rep0 = np.array((ao3_0.individuals[0],ao4_0.individuals[0],ao5_0.individuals[0],ao6_0.individuals[0]))
oner_rep1 = np.array((ao3_1.individuals[0],ao4_1.individuals[0],ao5_1.individuals[0],ao6_1.individuals[0]))
oner_rep2 = np.array((ao3_2.individuals[0],ao4_2.individuals[0],ao5_2.individuals[0],ao6_2.individuals[0]))
oner_rep3 = np.array((ao3_3.individuals[0],ao4_3.individuals[0],ao5_3.individuals[0],ao6_3.individuals[0]))
oner_rep4 = np.array((ao3_4.individuals[0],ao4_4.individuals[0],ao5_4.individuals[0],ao6_4.individuals[0]))
oner_rep5 = np.array((ao3_5.individuals[0],ao4_5.individuals[0],ao5_5.individuals[0],ao6_5.individuals[0]))
oner_rep6 = np.array((ao3_6.individuals[0],ao4_6.individuals[0],ao5_6.individuals[0],ao6_6.individuals[0]))
oner_rep7 = np.array((ao3_7.individuals[0],ao4_7.individuals[0],ao5_7.individuals[0],ao6_7.individuals[0]))
oner_rep8 = np.array((ao3_8.individuals[0],ao4_8.individuals[0],ao5_8.individuals[0],ao6_8.individuals[0]))
oner_rep9 = np.array((ao3_9.individuals[0],ao4_9.individuals[0],ao5_9.individuals[0],ao6_9.individuals[0]))

# Exporting aligmnents
nutria.exportAlignments(found_rep0,"Founder_a3456_rep0")
nutria.exportAlignments(oner_rep0,"Oner_ao3456_rep0")
nutria.exportAlignments(found_rep1,"Founder_a3456_rep1")
nutria.exportAlignments(oner_rep1,"Oner_ao3456_rep1")
nutria.exportAlignments(found_rep2,"Founder_a3456_rep2")
nutria.exportAlignments(oner_rep2,"Oner_ao3456_rep2")
nutria.exportAlignments(found_rep3,"Founder_a3456_rep3")
nutria.exportAlignments(oner_rep3,"Oner_ao3456_rep3")
nutria.exportAlignments(found_rep4,"Founder_a3456_rep4")
nutria.exportAlignments(oner_rep4,"Oner_ao3456_rep4")
nutria.exportAlignments(found_rep5,"Founder_a3456_rep5")
nutria.exportAlignments(oner_rep5,"Oner_ao3456_rep5")
nutria.exportAlignments(found_rep6,"Founder_a3456_rep6")
nutria.exportAlignments(oner_rep6,"Oner_ao3456_rep6")
nutria.exportAlignments(found_rep7,"Founder_a3456_rep7")
nutria.exportAlignments(oner_rep7,"Oner_ao3456_rep7")
nutria.exportAlignments(found_rep8,"Founder_a3456_rep8")
nutria.exportAlignments(oner_rep8,"Oner_ao3456_rep8")
nutria.exportAlignments(found_rep9,"Founder_a3456_rep9")
nutria.exportAlignments(oner_rep9,"Oner_ao3456_rep9")

exit
